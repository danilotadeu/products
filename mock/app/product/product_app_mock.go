// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danilotadeu/products/app/product (interfaces: App)

// Package mockAppProduct is a generated GoMock package.
package mockAppProduct

import (
	context "context"
	reflect "reflect"

	product "github.com/danilotadeu/products/model/product"
	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockApp) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApp)(nil).Delete), arg0, arg1)
}

// GetAllProducts mocks base method.
func (m *MockApp) GetAllProducts(arg0 context.Context, arg1, arg2 int64, arg3 string) ([]*product.ProductDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*product.ProductDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockAppMockRecorder) GetAllProducts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockApp)(nil).GetAllProducts), arg0, arg1, arg2, arg3)
}

// GetOneByID mocks base method.
func (m *MockApp) GetOneByID(arg0 context.Context, arg1 int64) (*product.ProductDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", arg0, arg1)
	ret0, _ := ret[0].(*product.ProductDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockAppMockRecorder) GetOneByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockApp)(nil).GetOneByID), arg0, arg1)
}

// GetTotalProducts mocks base method.
func (m *MockApp) GetTotalProducts(arg0 context.Context) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProducts", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProducts indicates an expected call of GetTotalProducts.
func (mr *MockAppMockRecorder) GetTotalProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProducts", reflect.TypeOf((*MockApp)(nil).GetTotalProducts), arg0)
}

// SaveProduct mocks base method.
func (m *MockApp) SaveProduct(arg0 context.Context, arg1 product.ProductDB) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockAppMockRecorder) SaveProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockApp)(nil).SaveProduct), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockApp) UpdateProduct(arg0 context.Context, arg1 product.ProductDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockAppMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockApp)(nil).UpdateProduct), arg0, arg1)
}
