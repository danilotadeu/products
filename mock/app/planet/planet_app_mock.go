// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danilotadeu/star_wars/app/planet (interfaces: App)

// Package mockAppPlanet is a generated GoMock package.
package mockAppPlanet

import (
	context "context"
	reflect "reflect"

	planet "github.com/danilotadeu/star_wars/model/planet"
	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// CreatePlanetsAndFilms mocks base method.
func (m *MockApp) CreatePlanetsAndFilms(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanetsAndFilms", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlanetsAndFilms indicates an expected call of CreatePlanetsAndFilms.
func (mr *MockAppMockRecorder) CreatePlanetsAndFilms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanetsAndFilms", reflect.TypeOf((*MockApp)(nil).CreatePlanetsAndFilms), arg0)
}

// Delete mocks base method.
func (m *MockApp) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApp)(nil).Delete), arg0, arg1)
}

// GetAllPlanets mocks base method.
func (m *MockApp) GetAllPlanets(arg0 context.Context, arg1, arg2 int64, arg3 string) ([]*planet.PlanetDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlanets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*planet.PlanetDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlanets indicates an expected call of GetAllPlanets.
func (mr *MockAppMockRecorder) GetAllPlanets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlanets", reflect.TypeOf((*MockApp)(nil).GetAllPlanets), arg0, arg1, arg2, arg3)
}

// GetOneByID mocks base method.
func (m *MockApp) GetOneByID(arg0 context.Context, arg1 int64) (*planet.PlanetDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", arg0, arg1)
	ret0, _ := ret[0].(*planet.PlanetDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockAppMockRecorder) GetOneByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockApp)(nil).GetOneByID), arg0, arg1)
}

// GetTotalPlanets mocks base method.
func (m *MockApp) GetTotalPlanets(arg0 context.Context) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPlanets", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPlanets indicates an expected call of GetTotalPlanets.
func (mr *MockAppMockRecorder) GetTotalPlanets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPlanets", reflect.TypeOf((*MockApp)(nil).GetTotalPlanets), arg0)
}

// SaveFilms mocks base method.
func (m *MockApp) SaveFilms(arg0 context.Context, arg1 []string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilms", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilms indicates an expected call of SaveFilms.
func (mr *MockAppMockRecorder) SaveFilms(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilms", reflect.TypeOf((*MockApp)(nil).SaveFilms), arg0, arg1, arg2)
}
